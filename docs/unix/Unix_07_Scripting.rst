.. _Unix_07_Scripting:

第7节: 脚本
================

.. note::
  
  主题: 通配符，脚本
  
  命令: awk

---------------

组合命令
***************

到目前为止，您已经学习了如何使用 for 循环和条件语句来自动化并决定何时运行代码块。然而，您很快就会发现，每次想要运行大型和复杂的代码块时，手动编写它们是很繁琐的。在终端中编写的一长串代码也很难调试。

相反，我们可以把所有内容放入一个 **脚本**，即包含代码的文件中。这使您的代码紧凑，如果需要，还能轻松在不同目录之间移动。这也使调试变得容易得多。

文本编辑器
****************

在我们开始编写脚本之前，您应该下载一个合适的代码编辑器。Windows 用户可以下载 Notepad++，Mac 用户应该从苹果商店下载 `TextWrangler <https://www.barebones.com/products/textwrangler/>`__ 。 使用其中之一而不是默认的文本编辑器是很重要的; 否则，您可能会遇到回车符的问题，这在一个视频中有演示 `here <https://www.youtube.com/watch?v=m4p3fYO6dCI>`__.


编写您的第一个脚本
****************

一旦您下载了 TextWrangler，打开它并在第一行编写此代码，也称为shebang：  ``#!/bin/bash`` 。它表示以下代码应使用 bash shell 进行解释并遵循 bash 语法。

.. figure:: TextWrangler_Shebang.png

 TextWrangler 中编辑的文件中 shebang 的示例。shebang 总是写在文件的第一行，以井号和感叹号开头，后跟用于解释代码的 shell 的绝对路径。

接下来，编写您之前看到的其中一个 for 循环，例如：

::

 for i in 1 2 3; do 
   echo $i; 
 done
 
缩进 for 循环或条件语句的主体是良好的编码实践，通常使用制表符或几个空格。这能让眼睛快速看到代码的结构，并猜测某些命令的位置。使用井号包含注释也很有帮助：井号后面写的任何内容都不会被 shell 解释，但对读者了解命令的作用很有用。例如，在循环之前，我们可以写一个关于以下代码如何打印 1 到 3 的注释。有些编码人员喜欢在代码的每个主要部分之间留一个空格；这是一个风格选择，由您决定。

现在点击 ``File -> Save As``，并将其命名为 ``printNums.sh``,.sh 扩展名表示该文件是一个 shell 脚本。 将其保存到桌面。在终端中，导航到桌面，然后输入 ``bash printNums.sh`` 来运行它。 您也可以通过输入 ``./printNums.sh``来运行该命令。这将运行脚本中的所有代码，就好像您手动输入了一样。这是一个简单的示例，但您可以看到您可以根据需要添加任意多行代码。

运行较大的脚本。
***************

让我们看看如何运行一个包含多行代码的较大脚本。转到 `this link <https://www.github.com/andrewjahn/FSL_Scripts>`__ 选中 ``make_FSL_Timings.sh``。 点击 ``Raw`` 按钮来查看其内容. 您可以在页面的任何位置右键单击并将其保存为脚本，或者您可以将代码复制并粘贴到 TextWrangler 中。 把它存为 ``make_FSL_Timings.sh``, 并将其移动到 Flanker 目录。 

让我们看看这段代码的作用。注意，我们有一个 shebang 表明脚本是用 Bash 语法编写的；我们在每个井号后面也有注释，标记了代码的主要部分。第一块代码是一个条件语句，检查名为 ``subjList.txt`` 的文件是否存在；如果不存在，那么列出每个受试者目录，并将受试者列表重定向到一个名为 subjList.txt 的文件。

通配符
^^^^^^^^^^^^^^^

这引出了一个重要的概念：通配符。您经常会使用两种类型的 **通配符** 。第一种是星号，它查找一个或多个字符。例如，导航到 Flanker 目录并输入 ``mkdir sub-100`` 。如果您输入 ``ls -d sub-*`` ，它将返回以 sub- 开头的每个目录，无论是 sub-01 还是 sub-100。星号通配符不区分目录是六个字符长还是六百个字符长；只要它们以 ``sub-`` 开头，它就会匹配并返回所有目录。另一种类型的通配符是问号，它匹配任何字符的单个出现。如果您输入 ``ls -d sub-??`` ，它将仅返回破折号后有两个整数的目录 - 换句话说，它将返回 sub-01 到 sub-26，但不返回 sub-100。

.. figure:: Wildcards_Demo.gif


使用 Awk 进行文本操作
^^^^^^^^^^^^^^^^

for 循环的主体包含了一些新的东西，一个叫做awk的命令。 **awk** 是一个文本处理命令，用于打印文本文件中的列。以下是它的工作原理的基础知识：如果您进入一个受试者的 func 目录并输入 ``cat sub-08_task-flanker_run-1_events.tsv``，它将返回该文件中的所有文本。对于我们的 fMRI 分析，我们想要指定起始时间和持续时间的列，以及在最后一列中作为占位符的数字 1 。您可以使用竖线将此命令的输出重定向为 awk 命令的输入。然后，您可以在 awk 中使用条件语句来打印特定实验条件的起始时间，并将该输出重定向到相应的文本文件。下面链接中的书中章节对此有更详细的讨论。

现在导航回到包含所有受试者的目录，删除 sub-100 目录并运行脚本。这需要一些时间，然后为您所有的受试者创建时间文件。您可以使用 cat 命令检查它们，它们应该都看起来像这样：

.. figure:: OnsetFile_Output.png

脚本和通配符使您的代码更具灵活性，并可以为您节省无数小时的劳动 - 想象一下为每个受试者在我们的脚本中输入每个命令。稍后，我们将使用这些脚本来自动分析整个数据集 - 但要做到这一点，我们还需要了解一个用于操作文本的命令 - sed 命令。


-------------

练习
************


------------
